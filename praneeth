     // Task 2
//problem3 - java
public class LongestPalindrome
{
public String findThePolindrome(String str)
{
if(str == null)
{
return null;
}
String longestPolindrome = String.valueOf(str.charAt(0));
for(int i=0;i<str.length()-1;i++){
string returnedPalindrome = findLongestPalindromeWithSpecifiedParameter(str, i, i);
if(returnedPalindrome.length()>longestPalindrome.length())
{
longestPalindrome = returnedPalindrome;
}
returnedPalindrome = findLongestPalindromeWithSpecifiedParameter(str, i, i+1);
if(returnedPalindrome.length() > longestPalindrome.length())
{
longestPalindrome = returnedPalindrome;
}
}
return longestPalindrome;
}
public String findLongestPalindromeWithSpecifiedParameter(String str, int left, int right)
{
if (left > right)
return null;
while (left >=0 && right < str.length() && str.charAt(left) == str.charAt(right))
{
left--;
right++;
}
return str.substring(left + 1,right);
}
public static void main(String[] args)
{
LongestPalindrome longestPalindrome = new LongestPalindrome();
System.out.println("Longest Palindrome in babad is " + longestPalindrome.findTheLongestPalindrome("babad"));
System.out.println(Longest Palindrome in cbbd is " + longestPalindrome.findTheLongestPalindrome("cbbd"));
}
}

//problem2 - java
public class solution
{
public int longestSubstring s, int k)
{
return helper(s.toCharArray(),0,s.length(),k);
}
int helper(char[]n ch,int start,int end,int k)
{
if(end-start<k) 
return 0;
int[] count=new int[26];
for(int i=start;i<end;i++)
{
count[ch[i]-'a']++;
}
for(int i=start;i<end;i++)
{
if(count[ch[i]-'a'<k)
{
int j=i+1;
}
return Math.max(helper(ch,start,i,k),helper(ch,j,end,k));
}
}
return end-start;
}
}

//problem1 - c language

#include <stdio.h>
#include<stdbool.h>
#include<stdlib.h>

struct Node
{
int data;
struct Node*prev;
struct Node*next;
};
void push(struct Node** head_ref, int new_c)
{
struct Node* new_node = (struct Node*)
malloc(sizeof(struct Node));
new_node->data = new_c;
new_node->prev = null;
new_node->next = (*head_ref);
if ((*head_ref) != null)
(*head_ref)->prev = new_node;
*head_ref = new_node;
}
bool isCircular(struct Node *head)
{
struct Node *temp=head;
while(temp!=null)
{
if(temp->next==head)
retrurn true;
temp=temp->next;
}
return false;
}
int main(void)
{
struct Node* head = null;
push(&head, 5);
push(&head, 4);
push(&head, 3);
push(&head, 2);
push(&head, 1);
if(isCircular(head))
printf("Yes\n");
printf("No\n");
}

